from class_generator import Generator
from abstractlimitstructure_p5 import Stack, PriorQueue

if __name__ == "__main__":
    g = Generator()
    hamster = [g.generate_single()[0] for i in range(5)]
    for i in hamster:
        print(i)
    print("Stack:")
    stack = Stack()
    stack.push(hamster[0])
    stack.push(hamster[1])
    stack.push(hamster[2])
    print(stack)
    print(stack.top())
    print(stack.pop())
    stack.push(hamster[3])
    stack.push(hamster[4])
    print(stack)
    print(stack.pop())
    print(stack.pop())
    print(stack)
    print("Priority queue:")
    queue = PriorQueue()
    queue.enqueue(hamster[0])
    queue.enqueue(hamster[1])
    queue.enqueue(hamster[2])
    print("Is empty:", queue.is_empty())
    print("Size:", queue.size())
    print("Peek:", queue.peek())
    dequeued_hamster = queue.dequeue()
    print("Dequeued hamster:", dequeued_hamster)
    queue.enqueue(hamster[3])
    queue.enqueue(hamster[4])
    print("Size:", queue.size())
    dequeued_hamster = queue.dequeue()
    print("Dequeued hamster:", dequeued_hamster)
    dequeued_hamster = queue.dequeue()
    print("Dequeued hamster:", dequeued_hamster)
    print("Size:", queue.size())
